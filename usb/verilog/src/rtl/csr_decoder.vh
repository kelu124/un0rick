// Generated by util/csr_map/gen_csr.py.
// Please do not edit manually!

localparam CSR_TOTAL = 32;

// INITDEL - Initial pulse delay -- 0 - 1 period of 127.5 MHz, 1 - 2 periods, etc.
localparam INITDEL_ADDR = 8'h00;
localparam INITDEL_POS = 0;
localparam INITDEL_RST = 8'h7;

// PONW - Pon width -- 0 - 1 period of 127.5 MHz, 1 - 2 periods, etc.
localparam PONW_ADDR = 8'h01;
localparam PONW_POS = 1;
localparam PONW_RST = 8'h10;

// POFFW - Poff width -- 0 - 1 period of 127.5 MHz, 1 - 2 periods, etc.
localparam POFFW_ADDR = 8'h02;
localparam POFFW_POS = 2;
localparam POFFW_RST = 8'h80;

// INTERW - Intermediate delay width -- 0 - 1 period of 127.5 MHz, 1 - 2 periods, etc.
localparam INTERW_ADDR = 8'h03;
localparam INTERW_POS = 3;
localparam INTERW_RST = 8'h7;

// DRMODE - Double resolution mode -- add 1 to INITDEL whe line is even
localparam DRMODE_ADDR = 8'h04;
localparam DRMODE_POS = 4;
localparam DRMODE_RST = 1'h0;

// DACOUT - DAC out -- value for the DAC idle state
localparam DACOUT_ADDR = 8'h07;
localparam DACOUT_POS = 5;
localparam DACOUT_RST = 10'h100;

// DACGAIN - DAC gain
localparam DACGAIN_ADDR = 8'h20;
localparam DACGAIN_POS = 6;

// ACQSTART - Start acquisition
localparam ACQSTART_ADDR = 8'h50;
localparam ACQSTART_POS = 7;
localparam ACQSTART_RST = 1'h0;

// ACQDONE - Acquisition is done
localparam ACQDONE_ADDR = 8'h51;
localparam ACQDONE_POS = 8;
localparam ACQDONE_RST = 1'h0;

// NBLINES - Number of lines per acquisition -- 0 - 1 line, 1 - 2 lines, etc.
localparam NBLINES_ADDR = 8'h52;
localparam NBLINES_POS = 9;
localparam NBLINES_RST = 8'h0;

// ACQBUSY - Acquisition is busy
localparam ACQBUSY_ADDR = 8'h53;
localparam ACQBUSY_POS = 10;
localparam ACQBUSY_RST = 1'h0;

// LED1 - LED1 (LED_ACQUISITION) control
localparam LED1_ADDR = 8'h63;
localparam LED1_POS = 11;
localparam LED1_RST = 1'h0;

// LED2 - LED2 (LED_SiNGLE/nLOOP) control
localparam LED2_ADDR = 8'h64;
localparam LED2_POS = 12;
localparam LED2_RST = 1'h0;

// LED3 - LED3 control
localparam LED3_ADDR = 8'h65;
localparam LED3_POS = 13;
localparam LED3_RST = 1'h0;

// TOPTURN1 - TOP_TURN1 status
localparam TOPTURN1_ADDR = 8'h66;
localparam TOPTURN1_POS = 14;
localparam TOPTURN1_RST = 1'h0;

// TOPTURN2 - TOP_TURN2 status
localparam TOPTURN2_ADDR = 8'h67;
localparam TOPTURN2_POS = 15;
localparam TOPTURN2_RST = 1'h0;

// TOPTURN3 - TOP_TURN3 status
localparam TOPTURN3_ADDR = 8'h68;
localparam TOPTURN3_POS = 16;
localparam TOPTURN3_RST = 1'h0;

// JUMPER1 - Jumper1 status
localparam JUMPER1_ADDR = 8'h69;
localparam JUMPER1_POS = 17;
localparam JUMPER1_RST = 1'h0;

// JUMPER2 - Jumper2 status
localparam JUMPER2_ADDR = 8'h6a;
localparam JUMPER2_POS = 18;
localparam JUMPER2_RST = 1'h0;

// JUMPER3 - Jumper3 status
localparam JUMPER3_ADDR = 8'h6b;
localparam JUMPER3_POS = 19;
localparam JUMPER3_RST = 1'h0;

// OUT1ICE - OUT1_ICE output control
localparam OUT1ICE_ADDR = 8'h6c;
localparam OUT1ICE_POS = 20;
localparam OUT1ICE_RST = 1'h1;

// OUT2ICE - OUT2_ICE output control
localparam OUT2ICE_ADDR = 8'h6d;
localparam OUT2ICE_POS = 21;
localparam OUT2ICE_RST = 1'h0;

// OUT3ICE - OUT3_ICE output control
localparam OUT3ICE_ADDR = 8'h6e;
localparam OUT3ICE_POS = 22;
localparam OUT3ICE_RST = 1'h1;

// HVMUXEN - Enable HV mux driver
localparam HVMUXEN_ADDR = 8'h6f;
localparam HVMUXEN_POS = 23;
localparam HVMUXEN_RST = 1'h0;

// HVMUXSW - Control HV mux switches
localparam HVMUXSW_ADDR = 8'h70;
localparam HVMUXSW_POS = 24;
localparam HVMUXSW_RST = 16'h0;

// RAMDATA - Read data from the external RAM
localparam RAMDATA_ADDR = 8'ha0;
localparam RAMDATA_POS = 25;

// RAMRADDRRST - Reset external RAM read address
localparam RAMRADDRRST_ADDR = 8'ha1;
localparam RAMRADDRRST_POS = 26;
localparam RAMRADDRRST_RST = 1'h0;

// RAMFINC - Fill external RAM with incrementing data pattern
localparam RAMFINC_ADDR = 8'ha4;
localparam RAMFINC_POS = 27;
localparam RAMFINC_RST = 1'h0;

// RAMFDEC - Fill external RAM with decrementing data pattern
localparam RAMFDEC_ADDR = 8'ha5;
localparam RAMFDEC_POS = 28;
localparam RAMFDEC_RST = 1'h0;

// RAMFDONE - Filling of external RAM is done
localparam RAMFDONE_ADDR = 8'ha6;
localparam RAMFDONE_POS = 29;
localparam RAMFDONE_RST = 1'h0;

// AUTHOR - Author
localparam AUTHOR_ADDR = 8'hf0;
localparam AUTHOR_POS = 30;
localparam AUTHOR_RST = 8'h1;

// VERSION - Version
localparam VERSION_ADDR = 8'hf1;
localparam VERSION_POS = 31;
localparam VERSION_RST = 8'h1;

reg [CSR_TOTAL-1:0] sel_bus;
wire [CSR_TOTAL-1:0] rvalid_bus;
wire [CSR_TOTAL*CSR_DATA_W-1:0] rdata_bus;
reg [CSR_DATA_W-1:0] csr_rdata_next;
reg csr_rvalid_next;

always @(*) begin
    csr_rdata_next  = csr_rdata;
    csr_rvalid_next = csr_rvalid;
    sel_bus         = '0;
    case (csr_addr)
        INITDEL_ADDR : begin
            sel_bus[INITDEL_POS] = 1'b1;
            csr_rdata_next  = (csr_ren && !csr_rvalid) ? rdata_bus[INITDEL_POS * CSR_DATA_W +:CSR_DATA_W] : '0;
            csr_rvalid_next = (csr_ren && !csr_rvalid) ? rvalid_bus[INITDEL_POS] : 1'b0;
        end

        PONW_ADDR : begin
            sel_bus[PONW_POS] = 1'b1;
            csr_rdata_next  = (csr_ren && !csr_rvalid) ? rdata_bus[PONW_POS * CSR_DATA_W +:CSR_DATA_W] : '0;
            csr_rvalid_next = (csr_ren && !csr_rvalid) ? rvalid_bus[PONW_POS] : 1'b0;
        end

        POFFW_ADDR : begin
            sel_bus[POFFW_POS] = 1'b1;
            csr_rdata_next  = (csr_ren && !csr_rvalid) ? rdata_bus[POFFW_POS * CSR_DATA_W +:CSR_DATA_W] : '0;
            csr_rvalid_next = (csr_ren && !csr_rvalid) ? rvalid_bus[POFFW_POS] : 1'b0;
        end

        INTERW_ADDR : begin
            sel_bus[INTERW_POS] = 1'b1;
            csr_rdata_next  = (csr_ren && !csr_rvalid) ? rdata_bus[INTERW_POS * CSR_DATA_W +:CSR_DATA_W] : '0;
            csr_rvalid_next = (csr_ren && !csr_rvalid) ? rvalid_bus[INTERW_POS] : 1'b0;
        end

        DRMODE_ADDR : begin
            sel_bus[DRMODE_POS] = 1'b1;
            csr_rdata_next  = (csr_ren && !csr_rvalid) ? rdata_bus[DRMODE_POS * CSR_DATA_W +:CSR_DATA_W] : '0;
            csr_rvalid_next = (csr_ren && !csr_rvalid) ? rvalid_bus[DRMODE_POS] : 1'b0;
        end

        DACOUT_ADDR : begin
            sel_bus[DACOUT_POS] = 1'b1;
            csr_rdata_next  = (csr_ren && !csr_rvalid) ? rdata_bus[DACOUT_POS * CSR_DATA_W +:CSR_DATA_W] : '0;
            csr_rvalid_next = (csr_ren && !csr_rvalid) ? rvalid_bus[DACOUT_POS] : 1'b0;
        end

        DACGAIN_ADDR + 31,
        DACGAIN_ADDR + 30,
        DACGAIN_ADDR + 29,
        DACGAIN_ADDR + 28,
        DACGAIN_ADDR + 27,
        DACGAIN_ADDR + 26,
        DACGAIN_ADDR + 25,
        DACGAIN_ADDR + 24,
        DACGAIN_ADDR + 23,
        DACGAIN_ADDR + 22,
        DACGAIN_ADDR + 21,
        DACGAIN_ADDR + 20,
        DACGAIN_ADDR + 19,
        DACGAIN_ADDR + 18,
        DACGAIN_ADDR + 17,
        DACGAIN_ADDR + 16,
        DACGAIN_ADDR + 15,
        DACGAIN_ADDR + 14,
        DACGAIN_ADDR + 13,
        DACGAIN_ADDR + 12,
        DACGAIN_ADDR + 11,
        DACGAIN_ADDR + 10,
        DACGAIN_ADDR + 9,
        DACGAIN_ADDR + 8,
        DACGAIN_ADDR + 7,
        DACGAIN_ADDR + 6,
        DACGAIN_ADDR + 5,
        DACGAIN_ADDR + 4,
        DACGAIN_ADDR + 3,
        DACGAIN_ADDR + 2,
        DACGAIN_ADDR + 1,
        DACGAIN_ADDR : begin
            sel_bus[DACGAIN_POS] = 1'b1;
            csr_rdata_next  = (csr_ren && !csr_rvalid) ? rdata_bus[DACGAIN_POS * CSR_DATA_W +:CSR_DATA_W] : '0;
            csr_rvalid_next = (csr_ren && !csr_rvalid) ? rvalid_bus[DACGAIN_POS] : 1'b0;
        end

        ACQSTART_ADDR : begin
            sel_bus[ACQSTART_POS] = 1'b1;
            csr_rdata_next  = (csr_ren && !csr_rvalid) ? rdata_bus[ACQSTART_POS * CSR_DATA_W +:CSR_DATA_W] : '0;
            csr_rvalid_next = (csr_ren && !csr_rvalid) ? rvalid_bus[ACQSTART_POS] : 1'b0;
        end

        ACQDONE_ADDR : begin
            sel_bus[ACQDONE_POS] = 1'b1;
            csr_rdata_next  = (csr_ren && !csr_rvalid) ? rdata_bus[ACQDONE_POS * CSR_DATA_W +:CSR_DATA_W] : '0;
            csr_rvalid_next = (csr_ren && !csr_rvalid) ? rvalid_bus[ACQDONE_POS] : 1'b0;
        end

        NBLINES_ADDR : begin
            sel_bus[NBLINES_POS] = 1'b1;
            csr_rdata_next  = (csr_ren && !csr_rvalid) ? rdata_bus[NBLINES_POS * CSR_DATA_W +:CSR_DATA_W] : '0;
            csr_rvalid_next = (csr_ren && !csr_rvalid) ? rvalid_bus[NBLINES_POS] : 1'b0;
        end

        ACQBUSY_ADDR : begin
            sel_bus[ACQBUSY_POS] = 1'b1;
            csr_rdata_next  = (csr_ren && !csr_rvalid) ? rdata_bus[ACQBUSY_POS * CSR_DATA_W +:CSR_DATA_W] : '0;
            csr_rvalid_next = (csr_ren && !csr_rvalid) ? rvalid_bus[ACQBUSY_POS] : 1'b0;
        end

        LED1_ADDR : begin
            sel_bus[LED1_POS] = 1'b1;
            csr_rdata_next  = (csr_ren && !csr_rvalid) ? rdata_bus[LED1_POS * CSR_DATA_W +:CSR_DATA_W] : '0;
            csr_rvalid_next = (csr_ren && !csr_rvalid) ? rvalid_bus[LED1_POS] : 1'b0;
        end

        LED2_ADDR : begin
            sel_bus[LED2_POS] = 1'b1;
            csr_rdata_next  = (csr_ren && !csr_rvalid) ? rdata_bus[LED2_POS * CSR_DATA_W +:CSR_DATA_W] : '0;
            csr_rvalid_next = (csr_ren && !csr_rvalid) ? rvalid_bus[LED2_POS] : 1'b0;
        end

        LED3_ADDR : begin
            sel_bus[LED3_POS] = 1'b1;
            csr_rdata_next  = (csr_ren && !csr_rvalid) ? rdata_bus[LED3_POS * CSR_DATA_W +:CSR_DATA_W] : '0;
            csr_rvalid_next = (csr_ren && !csr_rvalid) ? rvalid_bus[LED3_POS] : 1'b0;
        end

        TOPTURN1_ADDR : begin
            sel_bus[TOPTURN1_POS] = 1'b1;
            csr_rdata_next  = (csr_ren && !csr_rvalid) ? rdata_bus[TOPTURN1_POS * CSR_DATA_W +:CSR_DATA_W] : '0;
            csr_rvalid_next = (csr_ren && !csr_rvalid) ? rvalid_bus[TOPTURN1_POS] : 1'b0;
        end

        TOPTURN2_ADDR : begin
            sel_bus[TOPTURN2_POS] = 1'b1;
            csr_rdata_next  = (csr_ren && !csr_rvalid) ? rdata_bus[TOPTURN2_POS * CSR_DATA_W +:CSR_DATA_W] : '0;
            csr_rvalid_next = (csr_ren && !csr_rvalid) ? rvalid_bus[TOPTURN2_POS] : 1'b0;
        end

        TOPTURN3_ADDR : begin
            sel_bus[TOPTURN3_POS] = 1'b1;
            csr_rdata_next  = (csr_ren && !csr_rvalid) ? rdata_bus[TOPTURN3_POS * CSR_DATA_W +:CSR_DATA_W] : '0;
            csr_rvalid_next = (csr_ren && !csr_rvalid) ? rvalid_bus[TOPTURN3_POS] : 1'b0;
        end

        JUMPER1_ADDR : begin
            sel_bus[JUMPER1_POS] = 1'b1;
            csr_rdata_next  = (csr_ren && !csr_rvalid) ? rdata_bus[JUMPER1_POS * CSR_DATA_W +:CSR_DATA_W] : '0;
            csr_rvalid_next = (csr_ren && !csr_rvalid) ? rvalid_bus[JUMPER1_POS] : 1'b0;
        end

        JUMPER2_ADDR : begin
            sel_bus[JUMPER2_POS] = 1'b1;
            csr_rdata_next  = (csr_ren && !csr_rvalid) ? rdata_bus[JUMPER2_POS * CSR_DATA_W +:CSR_DATA_W] : '0;
            csr_rvalid_next = (csr_ren && !csr_rvalid) ? rvalid_bus[JUMPER2_POS] : 1'b0;
        end

        JUMPER3_ADDR : begin
            sel_bus[JUMPER3_POS] = 1'b1;
            csr_rdata_next  = (csr_ren && !csr_rvalid) ? rdata_bus[JUMPER3_POS * CSR_DATA_W +:CSR_DATA_W] : '0;
            csr_rvalid_next = (csr_ren && !csr_rvalid) ? rvalid_bus[JUMPER3_POS] : 1'b0;
        end

        OUT1ICE_ADDR : begin
            sel_bus[OUT1ICE_POS] = 1'b1;
            csr_rdata_next  = (csr_ren && !csr_rvalid) ? rdata_bus[OUT1ICE_POS * CSR_DATA_W +:CSR_DATA_W] : '0;
            csr_rvalid_next = (csr_ren && !csr_rvalid) ? rvalid_bus[OUT1ICE_POS] : 1'b0;
        end

        OUT2ICE_ADDR : begin
            sel_bus[OUT2ICE_POS] = 1'b1;
            csr_rdata_next  = (csr_ren && !csr_rvalid) ? rdata_bus[OUT2ICE_POS * CSR_DATA_W +:CSR_DATA_W] : '0;
            csr_rvalid_next = (csr_ren && !csr_rvalid) ? rvalid_bus[OUT2ICE_POS] : 1'b0;
        end

        OUT3ICE_ADDR : begin
            sel_bus[OUT3ICE_POS] = 1'b1;
            csr_rdata_next  = (csr_ren && !csr_rvalid) ? rdata_bus[OUT3ICE_POS * CSR_DATA_W +:CSR_DATA_W] : '0;
            csr_rvalid_next = (csr_ren && !csr_rvalid) ? rvalid_bus[OUT3ICE_POS] : 1'b0;
        end

        HVMUXEN_ADDR : begin
            sel_bus[HVMUXEN_POS] = 1'b1;
            csr_rdata_next  = (csr_ren && !csr_rvalid) ? rdata_bus[HVMUXEN_POS * CSR_DATA_W +:CSR_DATA_W] : '0;
            csr_rvalid_next = (csr_ren && !csr_rvalid) ? rvalid_bus[HVMUXEN_POS] : 1'b0;
        end

        HVMUXSW_ADDR : begin
            sel_bus[HVMUXSW_POS] = 1'b1;
            csr_rdata_next  = (csr_ren && !csr_rvalid) ? rdata_bus[HVMUXSW_POS * CSR_DATA_W +:CSR_DATA_W] : '0;
            csr_rvalid_next = (csr_ren && !csr_rvalid) ? rvalid_bus[HVMUXSW_POS] : 1'b0;
        end

        RAMDATA_ADDR : begin
            sel_bus[RAMDATA_POS] = 1'b1;
            csr_rdata_next  = (csr_ren && !csr_rvalid) ? rdata_bus[RAMDATA_POS * CSR_DATA_W +:CSR_DATA_W] : '0;
            csr_rvalid_next = (csr_ren && !csr_rvalid) ? rvalid_bus[RAMDATA_POS] : 1'b0;
        end

        RAMRADDRRST_ADDR : begin
            sel_bus[RAMRADDRRST_POS] = 1'b1;
            csr_rdata_next  = (csr_ren && !csr_rvalid) ? rdata_bus[RAMRADDRRST_POS * CSR_DATA_W +:CSR_DATA_W] : '0;
            csr_rvalid_next = (csr_ren && !csr_rvalid) ? rvalid_bus[RAMRADDRRST_POS] : 1'b0;
        end

        RAMFINC_ADDR : begin
            sel_bus[RAMFINC_POS] = 1'b1;
            csr_rdata_next  = (csr_ren && !csr_rvalid) ? rdata_bus[RAMFINC_POS * CSR_DATA_W +:CSR_DATA_W] : '0;
            csr_rvalid_next = (csr_ren && !csr_rvalid) ? rvalid_bus[RAMFINC_POS] : 1'b0;
        end

        RAMFDEC_ADDR : begin
            sel_bus[RAMFDEC_POS] = 1'b1;
            csr_rdata_next  = (csr_ren && !csr_rvalid) ? rdata_bus[RAMFDEC_POS * CSR_DATA_W +:CSR_DATA_W] : '0;
            csr_rvalid_next = (csr_ren && !csr_rvalid) ? rvalid_bus[RAMFDEC_POS] : 1'b0;
        end

        RAMFDONE_ADDR : begin
            sel_bus[RAMFDONE_POS] = 1'b1;
            csr_rdata_next  = (csr_ren && !csr_rvalid) ? rdata_bus[RAMFDONE_POS * CSR_DATA_W +:CSR_DATA_W] : '0;
            csr_rvalid_next = (csr_ren && !csr_rvalid) ? rvalid_bus[RAMFDONE_POS] : 1'b0;
        end

        AUTHOR_ADDR : begin
            sel_bus[AUTHOR_POS] = 1'b1;
            csr_rdata_next  = (csr_ren && !csr_rvalid) ? rdata_bus[AUTHOR_POS * CSR_DATA_W +:CSR_DATA_W] : '0;
            csr_rvalid_next = (csr_ren && !csr_rvalid) ? rvalid_bus[AUTHOR_POS] : 1'b0;
        end

        VERSION_ADDR : begin
            sel_bus[VERSION_POS] = 1'b1;
            csr_rdata_next  = (csr_ren && !csr_rvalid) ? rdata_bus[VERSION_POS * CSR_DATA_W +:CSR_DATA_W] : '0;
            csr_rvalid_next = (csr_ren && !csr_rvalid) ? rvalid_bus[VERSION_POS] : 1'b0;
        end

    endcase
end

always @(posedge clk or posedge rst) begin
    if (rst) begin
        csr_rdata  <= '0;
        csr_rvalid <= 1'b0;
    end else begin
        csr_rdata  <= csr_rdata_next;
        csr_rvalid <= csr_rvalid_next;
    end
end
